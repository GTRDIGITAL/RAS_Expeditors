name: Deploy Flask App to Azure App Service with ACR

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout codul sursă
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Autentificare la Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Autentificare la Azure Container Registry (ACR)
      - name: ACR Login
        run: az acr login --name rasregistryacr

      # 4. Construiește imaginea Docker
      - name: Build Docker image
        run: docker build . -f Dockerfile.web -t rasregistryacr.azurecr.io/ras-expeditors:latest

      # 5. Trimite imaginea în ACR
      - name: Push Docker image to ACR
        run: docker push rasregistryacr.azurecr.io/ras-expeditors:latest

      # 6. Publică în Azure App Service
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ras-expeditors
          images: rasregistryacr.azurecr.io/ras-expeditors:latest

      # 7. Setează variabilele de mediu Flask/MySQL/Redis
      - name: Set App Settings
        run: |
          az webapp config appsettings set \
            --name ras-expeditors \
            --resource-group ras_expeditors \
            --settings \
              FLASK_APP=app.py \
              FLASK_ENV=production \
              SECRET_KEY=${{ secrets.SECRET_KEY }} \
              MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
              MYSQL_USER=${{ secrets.MYSQL_USER }} \
              MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
              CELERY_BROKER_URL=${{ secrets.REDIS_URL }} \
              CELERY_RESULT_BACKEND=${{ secrets.REDIS_URL }}
