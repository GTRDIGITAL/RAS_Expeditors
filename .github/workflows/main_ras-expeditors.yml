name: Deploy Flask Web + Celery Worker to Azure Container Apps

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout cod
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Login Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3. Login ACR
      - name: ACR Login
        run: az acr login --name rasregistryacr

      # 4. Build și push Web image
      - name: Build and push Web Docker image
        run: |
          WEB_IMAGE=rasregistryacr.azurecr.io/ras-expeditors-web:latest
          docker build -f Dockerfile.web -t $WEB_IMAGE .
          docker push $WEB_IMAGE
          echo "WEB_IMAGE=$WEB_IMAGE" >> $GITHUB_ENV

      # 5. Build și push Worker image
      - name: Build and push Worker Docker image
        run: |
          WORKER_IMAGE=rasregistryacr.azurecr.io/ras-expeditors-worker:latest
          docker build -f Dockerfile.worker -t $WORKER_IMAGE .
          docker push $WORKER_IMAGE
          echo "WORKER_IMAGE=$WORKER_IMAGE" >> $GITHUB_ENV

      # 6. Deploy Web Container App (folosind variabile din .env)
      - name: Deploy Web Container App
        run: |
          export $(grep -v '^#' .env | xargs)
          az containerapp update \
            --name ras-expeditors \
            --resource-group ras_expeditors \
            --image $WEB_IMAGE \
            --set-env-vars $(grep -v '^#' .env | xargs)

      # 7. Deploy Worker Container App
      - name: Deploy Worker Container App
        run: |
          az containerapp create \
            --name ras-expeditors-worker \
            --resource-group ras_expeditors \
            --environment managedEnvironment-rasexpeditors-9f94 \
            --image $WORKER_IMAGE \
            --cpu 0.5 --memory 1Gi \
            --env-vars CELERY_BROKER_URL=${{ secrets.REDIS_URL }} CELERY_RESULT_BACKEND=${{ secrets.REDIS_URL }} \
            --min-replicas 1 --max-replicas 1 \
            --ingress 'external' false
